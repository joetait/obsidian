/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    pomo: 25,
    shortBreak: 5,
    longBreak: 15,
    longBreakInterval: 4,
    totalPomosCompleted: 0,
    notificationSound: true,
    logging: false,
    logToDaily: false,
    logFile: "Pomodoro Log.md",
    logText: "[🍅] dddd, MMMM DD YYYY, h:mm A",
    logActiveNote: false,
};
class PomoSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Status Bar Pomodoro Timer - Settings' });
        new obsidian.Setting(containerEl)
            .setName('Pomodoro time (minutes)')
            .setDesc('Leave blank for default.')
            .addText(text => text
            .setValue(this.plugin.settings.pomo.toString())
            .onChange(value => {
            this.plugin.settings.pomo = this.setTimerValue(value, 'pomo');
            this.plugin.saveSettings();
        }));
        new obsidian.Setting(containerEl)
            .setName('Short break time (minutes)')
            .setDesc('Leave blank for default.')
            .addText(text => text
            .setValue(this.plugin.settings.shortBreak.toString())
            .onChange(value => {
            this.plugin.settings.shortBreak = this.setTimerValue(value, 'shortBreak');
            this.plugin.saveSettings();
        }));
        new obsidian.Setting(containerEl)
            .setName('Long break time (minutes)')
            .setDesc('Leave blank for default.')
            .addText(text => text
            .setValue(this.plugin.settings.longBreak.toString())
            .onChange(value => {
            this.plugin.settings.longBreak = this.setTimerValue(value, 'longBreak');
            this.plugin.saveSettings();
        }));
        new obsidian.Setting(containerEl)
            .setName('Long break interval')
            .setDesc('Number of pomos before a long break. Leave blank for default.')
            .addText(text => text
            .setValue(this.plugin.settings.longBreakInterval.toString())
            .onChange(value => {
            this.plugin.settings.longBreakInterval = this.setTimerValue(value, 'longBreakInterval');
            this.plugin.saveSettings();
        }));
        new obsidian.Setting(containerEl)
            .setName('Notification sound')
            .setDesc('Play notification sound at the end of each pomo and break.')
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.notificationSound)
            .onChange(value => {
            this.plugin.settings.notificationSound = value;
            this.plugin.saveSettings();
        }));
        new obsidian.Setting(containerEl)
            .setName('Logging')
            .setDesc('Enable a log of completed pomodoros')
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.logging)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.logging = value;
            this.plugin.saveSettings();
            this.display(); //force refresh
        })));
        //various logging settings; only show if logging is enabled (currently does not autohide, only)
        if (this.plugin.settings.logging === true) {
            new obsidian.Setting(containerEl)
                .setName('Log file')
                .setDesc(`If file doesn't already exist, it will be created. Leave blank for current file, ${this.plugin.settings.logFile}.`)
                .addText(text => text
                .setValue(this.plugin.settings.logFile.toString())
                .onChange(value => {
                this.plugin.settings.logFile = value;
                this.plugin.saveSettings();
            }));
            new obsidian.Setting(containerEl)
                .setName('Timestamp Format')
                .setDesc('Specify format for the logtext using moment syntax')
                .addMomentFormat(text => text
                .setDefaultFormat(this.plugin.settings.logText)
                .onChange(value => {
                this.plugin.settings.logText = value;
                this.plugin.saveSettings();
            }));
            new obsidian.Setting(containerEl)
                .setName('Log active note')
                .setDesc('In log, add wikilink to the note that was active when you started the pomodoro.')
                .addToggle(toggle => toggle
                .setValue(this.plugin.settings.logActiveNote)
                .onChange(value => {
                this.plugin.settings.logActiveNote = value;
                this.plugin.saveSettings();
            }));
        }
    }
    //sets the setting for the given timer to value if valid, default if empty, otherwise sends user error notice
    setTimerValue(value, timer_type) {
        var timer_settings;
        var timer_default;
        switch (timer_type) {
            case ('pomo'): {
                timer_settings = this.plugin.settings.pomo;
                timer_default = DEFAULT_SETTINGS.pomo;
                break;
            }
            case ('shortBreak'): {
                timer_settings = this.plugin.settings.shortBreak;
                timer_default = DEFAULT_SETTINGS.shortBreak;
                break;
            }
            case ('longBreak'): {
                timer_settings = this.plugin.settings.longBreak;
                timer_default = DEFAULT_SETTINGS.longBreak;
                break;
            }
            case ('longBreakInterval'): {
                timer_settings = this.plugin.settings.longBreakInterval;
                timer_default = DEFAULT_SETTINGS.longBreakInterval;
                break;
            }
        }
        if (value === '') { //empty string -> reset to default
            return timer_default;
        }
        else if (!isNaN(Number(value)) && (Number(value) > 0)) { //if positive number, set setting
            return Number(value);
        }
        else { //invalid input
            new obsidian.Notice('Please specify a valid number.');
            return timer_settings;
        }
    }
}

var Mode;
(function (Mode) {
    Mode[Mode["Pomo"] = 0] = "Pomo";
    Mode[Mode["ShortBreak"] = 1] = "ShortBreak";
    Mode[Mode["LongBreak"] = 2] = "LongBreak";
    Mode[Mode["NoTimer"] = 3] = "NoTimer";
})(Mode || (Mode = {}));
const MILLISECS_IN_MINUTE = 60 * 1000;
class PomoTimer extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Loading status bar pomodoro timer');
            yield this.loadSettings();
            this.addSettingTab(new PomoSettingTab(this.app, this));
            this.statusBar = this.addStatusBarItem();
            this.statusBar.addClass("statusbar-pomo");
            this.mode = Mode.NoTimer;
            this.paused = false;
            this.pomosSinceStart = 0;
            /*Adds icon to the left side bar which starts the pomo timer when clicked
              if no timer is currently running, and otherwise quits current timer*/
            this.addRibbonIcon('clock', 'Start pomo', () => {
                if (this.mode === Mode.NoTimer) { //if starting from not having a timer running/paused
                    this.startTimer(Mode.Pomo);
                }
                else if (this.paused === true) { //if paused, start
                    this.restartTimer();
                }
                else if (this.paused === false) { //if unpaused, pause
                    this.pauseTimer();
                }
            });
            /*Update status bar timer ever half second
              Ideally should change so only updating when in timer mode
              - regular conditional doesn't remove after quit, need unload*/
            this.registerInterval(window.setInterval(() => this.statusBar.setText(this.setStatusBarText()), 500));
            this.addCommand({
                id: 'start-satusbar-pomo',
                name: 'Start pomodoro',
                checkCallback: (checking) => {
                    let leaf = this.app.workspace.activeLeaf;
                    if (leaf) {
                        if (!checking) { //start pomo
                            this.startTimer(Mode.Pomo);
                        }
                        return true;
                    }
                    return false;
                }
            });
            this.addCommand({
                id: 'quit-satusbar-pomo',
                name: 'Quit timer',
                checkCallback: (checking) => {
                    let leaf = this.app.workspace.activeLeaf;
                    if (leaf) {
                        if (!checking) {
                            this.quitTimer();
                        }
                        return true;
                    }
                    return false;
                }
            });
            this.addCommand({
                id: 'pause-satusbar-pomo',
                name: 'Toggle timer pause',
                checkCallback: (checking) => {
                    let leaf = this.app.workspace.activeLeaf;
                    if (leaf) {
                        if (!checking) {
                            if (this.paused === true) {
                                this.restartTimer();
                            }
                            else if (this.mode !== Mode.NoTimer) { //if some timer running
                                this.pauseTimer();
                            }
                        }
                        return true;
                    }
                    return false;
                }
            });
        });
    }
    quitTimer() {
        this.mode = Mode.NoTimer;
        this.startTime = obsidian.moment(0);
        this.endTime = obsidian.moment(0);
    }
    pauseTimer() {
        this.paused = true;
        this.pausedTime = this.getCountdown();
        new obsidian.Notice('Timer paused.');
        this.setStartEndTime(0); //reset start/end time (to start of unix epoch)
    }
    restartTimer() {
        this.setStartEndTime(this.pausedTime);
        this.modeRestartingNotification();
        this.paused = false;
    }
    startTimer(mode) {
        this.mode = mode;
        if (this.settings.logActiveNote === true) {
            const activeView = this.app.workspace.getActiveFile();
            if (activeView) {
                this.activeNote = activeView;
            }
        }
        this.setStartEndTime(this.getTotalModeMillisecs());
        this.modeStartingNotification();
    }
    setStartEndTime(millisecsLeft) {
        this.startTime = obsidian.moment(); //start time to current time
        this.endTime = obsidian.moment().add(millisecsLeft, 'milliseconds');
    }
    /*Set status bar to remaining time or empty string if no timer is running*/
    setStatusBarText() {
        if (this.mode !== Mode.NoTimer) {
            if (this.paused === true) {
                return millisecsToString(this.pausedTime);
            }
            /*if reaching the end of the current timer, switch to the next one (e.g. pomo -> break)*/
            else if (obsidian.moment().isSameOrAfter(this.endTime)) {
                if (this.mode === Mode.Pomo) { /*completed another pomo*/
                    this.settings.totalPomosCompleted += 1;
                    this.saveSettings();
                    this.pomosSinceStart += 1;
                    if (this.settings.logging === true) {
                        this.logPomo();
                    }
                }
                this.switchMode();
            }
            return millisecsToString(this.getCountdown());
        }
        else {
            return ""; //fixes(?) TypeError: failed to execute 'appendChild' on 'Node https://github.com/kzhovn/statusbar-pomo-obsidian/issues/4
        }
    }
    /*Return milliseconds left until end of timer*/
    getCountdown() {
        var endTimeClone = this.endTime.clone(); //rewrite with freeze?
        return endTimeClone.diff(obsidian.moment());
    }
    /*switch from pomos to long or short breaks as appropriate*/
    switchMode() {
        if (this.settings.notificationSound === true) { //play sound end of timer
            playSound();
        }
        if (this.mode === Mode.Pomo) {
            if (this.pomosSinceStart % this.settings.longBreakInterval === 0) {
                this.startTimer(Mode.LongBreak);
            }
            else {
                this.startTimer(Mode.ShortBreak);
            }
        }
        else { //short break. long break, or no timer
            this.startTimer(Mode.Pomo);
        }
    }
    /*Sends notification corresponding to whatever the mode is at the moment it's called*/
    modeStartingNotification() {
        var time = this.getTotalModeMillisecs();
        var unit;
        if (time >= MILLISECS_IN_MINUTE) { /*display in minutes*/
            time = Math.floor(time / MILLISECS_IN_MINUTE);
            unit = 'minute';
        }
        else { /*less than a minute, display in seconds*/
            time = Math.floor(time / 1000); //convert to secs
            unit = 'second';
        }
        switch (this.mode) {
            case (Mode.Pomo): {
                new obsidian.Notice(`Starting ${time} ${unit} pomodoro.`);
                break;
            }
            case (Mode.ShortBreak):
            case (Mode.LongBreak): {
                new obsidian.Notice(`Starting ${time} ${unit} break.`);
                break;
            }
            case (Mode.NoTimer): {
                new obsidian.Notice('Quitting pomodoro timer.');
                break;
            }
        }
    }
    modeRestartingNotification() {
        switch (this.mode) {
            case (Mode.Pomo): {
                new obsidian.Notice(`Restarting pomodoro.`);
                break;
            }
            case (Mode.ShortBreak):
            case (Mode.LongBreak): {
                new obsidian.Notice(`Restarting break.`);
                break;
            }
        }
    }
    getTotalModeMillisecs() {
        switch (this.mode) {
            case Mode.Pomo: {
                return this.settings.pomo * MILLISECS_IN_MINUTE;
            }
            case Mode.ShortBreak: {
                return this.settings.shortBreak * MILLISECS_IN_MINUTE;
            }
            case Mode.LongBreak: {
                return this.settings.longBreak * MILLISECS_IN_MINUTE;
            }
            //handle Mode.NoTimer?
        }
    }
    logPomo() {
        return __awaiter(this, void 0, void 0, function* () {
            const file = this.app.vault.getAbstractFileByPath(this.settings.logFile);
            var logText = obsidian.moment().format(this.settings.logText);
            if (this.settings.logActiveNote === true) {
                logText = logText + " " + this.app.fileManager.generateMarkdownLink(this.activeNote, '');
            }
            //this is a sin, please fix it so that it checks for being a folder without doing terrible things
            if (!file) { //if no file, create
                console.log("Creating file");
                yield this.app.vault.create(this.settings.logFile, "");
            }
            yield this.appendFile(this.settings.logFile, logText);
        });
    }
    //from Note Refactor plugin
    appendFile(filePath, note) {
        return __awaiter(this, void 0, void 0, function* () {
            let existingContent = yield this.app.vault.adapter.read(filePath);
            if (existingContent.length > 0) {
                existingContent = existingContent + '\r';
            }
            yield this.app.vault.adapter.write(filePath, existingContent + note);
        });
    }
    onunload() {
        console.log('Unloading status bar pomodoro timer');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
/*Returns [HH:]mm:ss left on the current timer*/
function millisecsToString(millisecs) {
    var formatedCountDown;
    if (millisecs >= 60 * 60 * 1000) { /* >= 1 hour*/
        formatedCountDown = obsidian.moment.utc(millisecs).format('HH:mm:ss');
    }
    else {
        formatedCountDown = obsidian.moment.utc(millisecs).format('mm:ss');
    }
    return formatedCountDown.toString();
}
//sorry for the horrible long string, splitting it out into a file the obvious way didn't work
function playSound() {
    const audioUrl = 'data:audio/ogg;base64,';
    const audio = new Audio(audioUrl);
    audio.play();
}

module.exports = PomoTimer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsInNyYy9zZXR0aW5ncy50cyIsInNyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XHJcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcclxuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcclxuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgZnJvbSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG4iLCJpbXBvcnQgeyBBcHAsIE5vdGljZSwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBQb21vVGltZXIgZnJvbSAnLi9tYWluJztcblxuZXhwb3J0IGludGVyZmFjZSBQb21vU2V0dGluZ3Mge1xuXHRwb21vOiBudW1iZXI7XG5cdHNob3J0QnJlYWs6IG51bWJlcjtcblx0bG9uZ0JyZWFrOiBudW1iZXI7XG5cdGxvbmdCcmVha0ludGVydmFsOiBudW1iZXI7XG5cdHRvdGFsUG9tb3NDb21wbGV0ZWQ6IG51bWJlcjtcblx0bm90aWZpY2F0aW9uU291bmQ6IGJvb2xlYW47XG5cdGxvZ2dpbmc6IGJvb2xlYW47XG5cdGxvZ1RvRGFpbHk6IGJvb2xlYW47XG5cdGxvZ0ZpbGU6IHN0cmluZztcblx0bG9nVGV4dDogc3RyaW5nO1xuXHRsb2dBY3RpdmVOb3RlOiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogUG9tb1NldHRpbmdzID0ge1xuXHRwb21vOiAyNSxcblx0c2hvcnRCcmVhazogNSxcblx0bG9uZ0JyZWFrOiAxNSxcblx0bG9uZ0JyZWFrSW50ZXJ2YWw6IDQsXG5cdHRvdGFsUG9tb3NDb21wbGV0ZWQ6IDAsXG5cdG5vdGlmaWNhdGlvblNvdW5kOiB0cnVlLFxuXHRsb2dnaW5nOiBmYWxzZSxcblx0bG9nVG9EYWlseTogZmFsc2UsXG5cdGxvZ0ZpbGU6IFwiUG9tb2Rvcm8gTG9nLm1kXCIsXG5cdGxvZ1RleHQ6IFwiW/CfjYVdIGRkZGQsIE1NTU0gREQgWVlZWSwgaDptbSBBXCIsXG5cdGxvZ0FjdGl2ZU5vdGU6IGZhbHNlLFxufVxuXG5leHBvcnQgY2xhc3MgUG9tb1NldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cGx1Z2luOiBQb21vVGltZXI7XG5cblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogUG9tb1RpbWVyKSB7XG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHR9XG5cblx0ZGlzcGxheSgpOiB2b2lkIHtcblx0XHRsZXQgeyBjb250YWluZXJFbCB9ID0gdGhpcztcblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ1N0YXR1cyBCYXIgUG9tb2Rvcm8gVGltZXIgLSBTZXR0aW5ncycgfSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdQb21vZG9ybyB0aW1lIChtaW51dGVzKScpXG5cdFx0XHQuc2V0RGVzYygnTGVhdmUgYmxhbmsgZm9yIGRlZmF1bHQuJylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucG9tby50b1N0cmluZygpKVxuXHRcdFx0XHQub25DaGFuZ2UodmFsdWUgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnBvbW8gPSB0aGlzLnNldFRpbWVyVmFsdWUodmFsdWUsICdwb21vJyk7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdH0pKTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ1Nob3J0IGJyZWFrIHRpbWUgKG1pbnV0ZXMpJylcblx0XHRcdC5zZXREZXNjKCdMZWF2ZSBibGFuayBmb3IgZGVmYXVsdC4nKVxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG9ydEJyZWFrLnRvU3RyaW5nKCkpXG5cdFx0XHRcdC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvcnRCcmVhayA9IHRoaXMuc2V0VGltZXJWYWx1ZSh2YWx1ZSwgJ3Nob3J0QnJlYWsnKTtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0fSkpO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnTG9uZyBicmVhayB0aW1lIChtaW51dGVzKScpXG5cdFx0XHQuc2V0RGVzYygnTGVhdmUgYmxhbmsgZm9yIGRlZmF1bHQuJylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubG9uZ0JyZWFrLnRvU3RyaW5nKCkpXG5cdFx0XHRcdC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubG9uZ0JyZWFrID0gdGhpcy5zZXRUaW1lclZhbHVlKHZhbHVlLCAnbG9uZ0JyZWFrJyk7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdH0pKTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ0xvbmcgYnJlYWsgaW50ZXJ2YWwnKVxuXHRcdFx0LnNldERlc2MoJ051bWJlciBvZiBwb21vcyBiZWZvcmUgYSBsb25nIGJyZWFrLiBMZWF2ZSBibGFuayBmb3IgZGVmYXVsdC4nKVxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5sb25nQnJlYWtJbnRlcnZhbC50b1N0cmluZygpKVxuXHRcdFx0XHQub25DaGFuZ2UodmFsdWUgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmxvbmdCcmVha0ludGVydmFsID0gdGhpcy5zZXRUaW1lclZhbHVlKHZhbHVlLCAnbG9uZ0JyZWFrSW50ZXJ2YWwnKTtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0fSkpO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnTm90aWZpY2F0aW9uIHNvdW5kJylcblx0XHRcdC5zZXREZXNjKCdQbGF5IG5vdGlmaWNhdGlvbiBzb3VuZCBhdCB0aGUgZW5kIG9mIGVhY2ggcG9tbyBhbmQgYnJlYWsuJylcblx0XHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub3RpZmljYXRpb25Tb3VuZClcblx0XHRcdFx0XHQub25DaGFuZ2UodmFsdWUgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Mubm90aWZpY2F0aW9uU291bmQgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdH0pKTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ0xvZ2dpbmcnKVxuXHRcdFx0LnNldERlc2MoJ0VuYWJsZSBhIGxvZyBvZiBjb21wbGV0ZWQgcG9tb2Rvcm9zJylcblx0XHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5sb2dnaW5nKVxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyB2YWx1ZSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5sb2dnaW5nID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHRcdHRoaXMuZGlzcGxheSgpOyAvL2ZvcmNlIHJlZnJlc2hcblx0XHRcdFx0XHR9KSk7XG5cblx0XHQvL3ZhcmlvdXMgbG9nZ2luZyBzZXR0aW5nczsgb25seSBzaG93IGlmIGxvZ2dpbmcgaXMgZW5hYmxlZCAoY3VycmVudGx5IGRvZXMgbm90IGF1dG9oaWRlLCBvbmx5KVxuXHRcdGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5sb2dnaW5nID09PSB0cnVlKSB7XG5cblx0XHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0XHQuc2V0TmFtZSgnTG9nIGZpbGUnKVxuXHRcdFx0XHQuc2V0RGVzYyhgSWYgZmlsZSBkb2Vzbid0IGFscmVhZHkgZXhpc3QsIGl0IHdpbGwgYmUgY3JlYXRlZC4gTGVhdmUgYmxhbmsgZm9yIGN1cnJlbnQgZmlsZSwgJHt0aGlzLnBsdWdpbi5zZXR0aW5ncy5sb2dGaWxlfS5gKVxuXHRcdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubG9nRmlsZS50b1N0cmluZygpKVxuXHRcdFx0XHRcdC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5sb2dGaWxlID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR9KSk7XG5cblx0XHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0XHQuc2V0TmFtZSgnVGltZXN0YW1wIEZvcm1hdCcpXG5cdFx0XHRcdC5zZXREZXNjKCdTcGVjaWZ5IGZvcm1hdCBmb3IgdGhlIGxvZ3RleHQgdXNpbmcgbW9tZW50IHN5bnRheCcpXG5cdFx0XHRcdC5hZGRNb21lbnRGb3JtYXQodGV4dCA9PiB0ZXh0XG5cdFx0XHRcdFx0LnNldERlZmF1bHRGb3JtYXQodGhpcy5wbHVnaW4uc2V0dGluZ3MubG9nVGV4dClcblx0XHRcdFx0XHQub25DaGFuZ2UodmFsdWUgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubG9nVGV4dCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0fSkpO1xuXG5cdFx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdMb2cgYWN0aXZlIG5vdGUnKVxuXHRcdFx0LnNldERlc2MoJ0luIGxvZywgYWRkIHdpa2lsaW5rIHRvIHRoZSBub3RlIHRoYXQgd2FzIGFjdGl2ZSB3aGVuIHlvdSBzdGFydGVkIHRoZSBwb21vZG9yby4nKVxuXHRcdFx0LmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmxvZ0FjdGl2ZU5vdGUpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKHZhbHVlID0+IHtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmxvZ0FjdGl2ZU5vdGUgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdH0pKTtcblx0XHR9XG5cblx0fVxuXG5cdC8vc2V0cyB0aGUgc2V0dGluZyBmb3IgdGhlIGdpdmVuIHRpbWVyIHRvIHZhbHVlIGlmIHZhbGlkLCBkZWZhdWx0IGlmIGVtcHR5LCBvdGhlcndpc2Ugc2VuZHMgdXNlciBlcnJvciBub3RpY2Vcblx0c2V0VGltZXJWYWx1ZSh2YWx1ZSwgdGltZXJfdHlwZTogc3RyaW5nKTogbnVtYmVyIHtcblx0XHR2YXIgdGltZXJfc2V0dGluZ3M6IG51bWJlcjtcblx0XHR2YXIgdGltZXJfZGVmYXVsdDogbnVtYmVyO1xuXG5cdFx0c3dpdGNoICh0aW1lcl90eXBlKSB7XG5cdFx0XHRjYXNlICgncG9tbycpOiB7XG5cdFx0XHRcdHRpbWVyX3NldHRpbmdzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MucG9tbztcblx0XHRcdFx0dGltZXJfZGVmYXVsdCA9IERFRkFVTFRfU0VUVElOR1MucG9tbztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRjYXNlICgnc2hvcnRCcmVhaycpOiB7XG5cdFx0XHRcdHRpbWVyX3NldHRpbmdzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvcnRCcmVhaztcblx0XHRcdFx0dGltZXJfZGVmYXVsdCA9IERFRkFVTFRfU0VUVElOR1Muc2hvcnRCcmVhaztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRjYXNlICgnbG9uZ0JyZWFrJyk6IHtcblx0XHRcdFx0dGltZXJfc2V0dGluZ3MgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5sb25nQnJlYWs7XG5cdFx0XHRcdHRpbWVyX2RlZmF1bHQgPSBERUZBVUxUX1NFVFRJTkdTLmxvbmdCcmVhaztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRjYXNlICgnbG9uZ0JyZWFrSW50ZXJ2YWwnKToge1xuXHRcdFx0XHR0aW1lcl9zZXR0aW5ncyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmxvbmdCcmVha0ludGVydmFsO1xuXHRcdFx0XHR0aW1lcl9kZWZhdWx0ID0gREVGQVVMVF9TRVRUSU5HUy5sb25nQnJlYWtJbnRlcnZhbDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHZhbHVlID09PSAnJykgeyAvL2VtcHR5IHN0cmluZyAtPiByZXNldCB0byBkZWZhdWx0XG5cdFx0XHRyZXR1cm4gdGltZXJfZGVmYXVsdDtcblx0XHR9IGVsc2UgaWYgKCFpc05hTihOdW1iZXIodmFsdWUpKSAmJiAoTnVtYmVyKHZhbHVlKSA+IDApKSB7IC8vaWYgcG9zaXRpdmUgbnVtYmVyLCBzZXQgc2V0dGluZ1xuXHRcdFx0cmV0dXJuIE51bWJlcih2YWx1ZSk7XG5cdFx0fSBlbHNlIHsgLy9pbnZhbGlkIGlucHV0XG5cdFx0XHRuZXcgTm90aWNlKCdQbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIG51bWJlci4nKTtcblx0XHRcdHJldHVybiB0aW1lcl9zZXR0aW5ncztcblx0XHR9XG5cdH1cbn1cbiIsImltcG9ydCB7IE5vdGljZSwgUGx1Z2luLCBtb21lbnQsIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBQb21vU2V0dGluZ1RhYiwgUG9tb1NldHRpbmdzLCBERUZBVUxUX1NFVFRJTkdTIH0gZnJvbSAnLi9zZXR0aW5ncyc7XHJcbmltcG9ydCB0eXBlIHsgTW9tZW50IH0gZnJvbSAnbW9tZW50JztcclxuXHJcbmVudW0gTW9kZSB7XHJcblx0UG9tbyxcclxuXHRTaG9ydEJyZWFrLFxyXG5cdExvbmdCcmVhayxcclxuXHROb1RpbWVyLFxyXG59XHJcblxyXG5jb25zdCBNSUxMSVNFQ1NfSU5fTUlOVVRFID0gNjAgKiAxMDAwO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9tb1RpbWVyIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRzZXR0aW5nczogUG9tb1NldHRpbmdzO1xyXG5cdHN0YXR1c0JhcjogSFRNTEVsZW1lbnQ7XHJcblx0c3RhcnRUaW1lOiBNb21lbnQ7IC8qd2hlbiBjdXJyZW50bHkgcnVubmluZyB0aW1lciBzdGFydGVkKi9cclxuXHRlbmRUaW1lOiBNb21lbnQ7ICAgLyp3aGVuIGN1cnJlbnRseSBydW5uaW5nIHRpbWVyIHdpbGwgZW5kIGlmIG5vdCBwYXVzZWQqL1xyXG5cdG1vZGU6IE1vZGU7XHJcblx0cGF1c2VkVGltZTogbnVtYmVyOyAgLypUaW1lIGxlZnQgb24gcGF1c2VkIHRpbWVyLCBpbiBtaWxsaXNlY29uZHMqL1xyXG5cdHBhdXNlZDogYm9vbGVhbjtcclxuXHRwb21vc1NpbmNlU3RhcnQ6IG51bWJlcjtcclxuXHRhY3RpdmVOb3RlOiBURmlsZTtcclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0Y29uc29sZS5sb2coJ0xvYWRpbmcgc3RhdHVzIGJhciBwb21vZG9ybyB0aW1lcicpO1xyXG5cclxuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IFBvbW9TZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcblxyXG5cdFx0dGhpcy5zdGF0dXNCYXIgPSB0aGlzLmFkZFN0YXR1c0Jhckl0ZW0oKTtcclxuXHRcdHRoaXMuc3RhdHVzQmFyLmFkZENsYXNzKFwic3RhdHVzYmFyLXBvbW9cIilcclxuXHJcblx0XHR0aGlzLm1vZGUgPSBNb2RlLk5vVGltZXI7XHJcblx0XHR0aGlzLnBhdXNlZCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5wb21vc1NpbmNlU3RhcnQgPSAwO1xyXG5cclxuXHRcdC8qQWRkcyBpY29uIHRvIHRoZSBsZWZ0IHNpZGUgYmFyIHdoaWNoIHN0YXJ0cyB0aGUgcG9tbyB0aW1lciB3aGVuIGNsaWNrZWRcclxuXHRcdCAgaWYgbm8gdGltZXIgaXMgY3VycmVudGx5IHJ1bm5pbmcsIGFuZCBvdGhlcndpc2UgcXVpdHMgY3VycmVudCB0aW1lciovXHJcblx0XHR0aGlzLmFkZFJpYmJvbkljb24oJ2Nsb2NrJywgJ1N0YXJ0IHBvbW8nLCAoKSA9PiB7XHJcblx0XHRcdGlmICh0aGlzLm1vZGUgPT09IE1vZGUuTm9UaW1lcikgeyAgLy9pZiBzdGFydGluZyBmcm9tIG5vdCBoYXZpbmcgYSB0aW1lciBydW5uaW5nL3BhdXNlZFxyXG5cdFx0XHRcdHRoaXMuc3RhcnRUaW1lcihNb2RlLlBvbW8pO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMucGF1c2VkID09PSB0cnVlKSB7IC8vaWYgcGF1c2VkLCBzdGFydFxyXG5cdFx0XHRcdHRoaXMucmVzdGFydFRpbWVyKCk7XHJcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5wYXVzZWQgPT09IGZhbHNlKSB7IC8vaWYgdW5wYXVzZWQsIHBhdXNlXHJcblx0XHRcdFx0dGhpcy5wYXVzZVRpbWVyKCk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdC8qVXBkYXRlIHN0YXR1cyBiYXIgdGltZXIgZXZlciBoYWxmIHNlY29uZFxyXG5cdFx0ICBJZGVhbGx5IHNob3VsZCBjaGFuZ2Ugc28gb25seSB1cGRhdGluZyB3aGVuIGluIHRpbWVyIG1vZGVcclxuXHRcdCAgLSByZWd1bGFyIGNvbmRpdGlvbmFsIGRvZXNuJ3QgcmVtb3ZlIGFmdGVyIHF1aXQsIG5lZWQgdW5sb2FkKi9cclxuXHRcdHRoaXMucmVnaXN0ZXJJbnRlcnZhbCh3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT5cclxuXHRcdFx0dGhpcy5zdGF0dXNCYXIuc2V0VGV4dCh0aGlzLnNldFN0YXR1c0JhclRleHQoKSksIDUwMCkpO1xyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnc3RhcnQtc2F0dXNiYXItcG9tbycsXHJcblx0XHRcdG5hbWU6ICdTdGFydCBwb21vZG9ybycsXHJcblx0XHRcdGNoZWNrQ2FsbGJhY2s6IChjaGVja2luZzogYm9vbGVhbikgPT4ge1xyXG5cdFx0XHRcdGxldCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWY7XHJcblx0XHRcdFx0aWYgKGxlYWYpIHtcclxuXHRcdFx0XHRcdGlmICghY2hlY2tpbmcpIHsgLy9zdGFydCBwb21vXHJcblx0XHRcdFx0XHRcdHRoaXMuc3RhcnRUaW1lcihNb2RlLlBvbW8pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6ICdxdWl0LXNhdHVzYmFyLXBvbW8nLFxyXG5cdFx0XHRuYW1lOiAnUXVpdCB0aW1lcicsXHJcblx0XHRcdGNoZWNrQ2FsbGJhY2s6IChjaGVja2luZzogYm9vbGVhbikgPT4ge1xyXG5cdFx0XHRcdGxldCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWY7XHJcblx0XHRcdFx0aWYgKGxlYWYpIHtcclxuXHRcdFx0XHRcdGlmICghY2hlY2tpbmcpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5xdWl0VGltZXIoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAncGF1c2Utc2F0dXNiYXItcG9tbycsXHJcblx0XHRcdG5hbWU6ICdUb2dnbGUgdGltZXIgcGF1c2UnLFxyXG5cdFx0XHRjaGVja0NhbGxiYWNrOiAoY2hlY2tpbmc6IGJvb2xlYW4pID0+IHtcclxuXHRcdFx0XHRsZXQgbGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmO1xyXG5cdFx0XHRcdGlmIChsZWFmKSB7XHJcblx0XHRcdFx0XHRpZiAoIWNoZWNraW5nKSB7XHJcblx0XHRcdFx0XHRcdGlmICh0aGlzLnBhdXNlZCA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMucmVzdGFydFRpbWVyKCk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5tb2RlICE9PSBNb2RlLk5vVGltZXIpIHsgLy9pZiBzb21lIHRpbWVyIHJ1bm5pbmdcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnBhdXNlVGltZXIoKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRxdWl0VGltZXIoKTogdm9pZCB7XHJcblx0XHR0aGlzLm1vZGUgPSBNb2RlLk5vVGltZXI7XHJcblx0XHR0aGlzLnN0YXJ0VGltZSA9IG1vbWVudCgwKTtcclxuXHRcdHRoaXMuZW5kVGltZSA9IG1vbWVudCgwKTtcclxuXHR9XHJcblxyXG5cdHBhdXNlVGltZXIoKTogdm9pZCB7XHJcblx0XHR0aGlzLnBhdXNlZCA9IHRydWU7XHJcblx0XHR0aGlzLnBhdXNlZFRpbWUgPSB0aGlzLmdldENvdW50ZG93bigpO1xyXG5cdFx0bmV3IE5vdGljZSgnVGltZXIgcGF1c2VkLicpO1xyXG5cdFx0dGhpcy5zZXRTdGFydEVuZFRpbWUoMCk7IC8vcmVzZXQgc3RhcnQvZW5kIHRpbWUgKHRvIHN0YXJ0IG9mIHVuaXggZXBvY2gpXHJcblx0fVxyXG5cclxuXHRyZXN0YXJ0VGltZXIoKTogdm9pZCB7XHJcblx0XHR0aGlzLnNldFN0YXJ0RW5kVGltZSh0aGlzLnBhdXNlZFRpbWUpO1xyXG5cdFx0dGhpcy5tb2RlUmVzdGFydGluZ05vdGlmaWNhdGlvbigpO1xyXG5cdFx0dGhpcy5wYXVzZWQgPSBmYWxzZTtcclxuXHR9XHJcblxyXG5cdHN0YXJ0VGltZXIobW9kZTogTW9kZSk6IHZvaWQge1xyXG5cdFx0dGhpcy5tb2RlID0gbW9kZTtcclxuXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5sb2dBY3RpdmVOb3RlID09PSB0cnVlKSB7XHJcblx0XHRcdGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG5cdFx0XHRpZiAoYWN0aXZlVmlldykge1xyXG5cdFx0XHRcdHRoaXMuYWN0aXZlTm90ZSA9IGFjdGl2ZVZpZXc7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnNldFN0YXJ0RW5kVGltZSh0aGlzLmdldFRvdGFsTW9kZU1pbGxpc2VjcygpKTtcclxuXHRcdHRoaXMubW9kZVN0YXJ0aW5nTm90aWZpY2F0aW9uKCk7XHJcblx0fVxyXG5cclxuXHRzZXRTdGFydEVuZFRpbWUobWlsbGlzZWNzTGVmdDogbnVtYmVyKTogdm9pZCB7XHJcblx0XHR0aGlzLnN0YXJ0VGltZSA9IG1vbWVudCgpOyAvL3N0YXJ0IHRpbWUgdG8gY3VycmVudCB0aW1lXHJcblx0XHR0aGlzLmVuZFRpbWUgPSBtb21lbnQoKS5hZGQobWlsbGlzZWNzTGVmdCwgJ21pbGxpc2Vjb25kcycpO1xyXG5cdH1cclxuXHJcblx0LypTZXQgc3RhdHVzIGJhciB0byByZW1haW5pbmcgdGltZSBvciBlbXB0eSBzdHJpbmcgaWYgbm8gdGltZXIgaXMgcnVubmluZyovXHJcblx0c2V0U3RhdHVzQmFyVGV4dCgpOiBzdHJpbmcge1xyXG5cdFx0aWYgKHRoaXMubW9kZSAhPT0gTW9kZS5Ob1RpbWVyKSB7XHJcblx0XHRcdGlmICh0aGlzLnBhdXNlZCA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdHJldHVybiBtaWxsaXNlY3NUb1N0cmluZyh0aGlzLnBhdXNlZFRpbWUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8qaWYgcmVhY2hpbmcgdGhlIGVuZCBvZiB0aGUgY3VycmVudCB0aW1lciwgc3dpdGNoIHRvIHRoZSBuZXh0IG9uZSAoZS5nLiBwb21vIC0+IGJyZWFrKSovXHJcblx0XHRcdGVsc2UgaWYgKG1vbWVudCgpLmlzU2FtZU9yQWZ0ZXIodGhpcy5lbmRUaW1lKSkge1xyXG5cdFx0XHRcdGlmICh0aGlzLm1vZGUgPT09IE1vZGUuUG9tbykgeyAvKmNvbXBsZXRlZCBhbm90aGVyIHBvbW8qL1xyXG5cdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy50b3RhbFBvbW9zQ29tcGxldGVkICs9IDE7XHJcblx0XHRcdFx0XHR0aGlzLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0dGhpcy5wb21vc1NpbmNlU3RhcnQgKz0gMTtcclxuXHJcblx0XHRcdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5sb2dnaW5nID09PSB0cnVlKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMubG9nUG9tbygpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR0aGlzLnN3aXRjaE1vZGUoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG1pbGxpc2Vjc1RvU3RyaW5nKHRoaXMuZ2V0Q291bnRkb3duKCkpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIFwiXCI7IC8vZml4ZXMoPykgVHlwZUVycm9yOiBmYWlsZWQgdG8gZXhlY3V0ZSAnYXBwZW5kQ2hpbGQnIG9uICdOb2RlIGh0dHBzOi8vZ2l0aHViLmNvbS9remhvdm4vc3RhdHVzYmFyLXBvbW8tb2JzaWRpYW4vaXNzdWVzLzRcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qUmV0dXJuIG1pbGxpc2Vjb25kcyBsZWZ0IHVudGlsIGVuZCBvZiB0aW1lciovXHJcblx0Z2V0Q291bnRkb3duKCk6IG51bWJlciB7XHJcblx0XHR2YXIgZW5kVGltZUNsb25lID0gdGhpcy5lbmRUaW1lLmNsb25lKCk7IC8vcmV3cml0ZSB3aXRoIGZyZWV6ZT9cclxuXHRcdHJldHVybiBlbmRUaW1lQ2xvbmUuZGlmZihtb21lbnQoKSk7XHJcblx0fVxyXG5cclxuXHQvKnN3aXRjaCBmcm9tIHBvbW9zIHRvIGxvbmcgb3Igc2hvcnQgYnJlYWtzIGFzIGFwcHJvcHJpYXRlKi9cclxuXHRzd2l0Y2hNb2RlKCk6IHZvaWQge1xyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3Mubm90aWZpY2F0aW9uU291bmQgPT09IHRydWUpIHsgLy9wbGF5IHNvdW5kIGVuZCBvZiB0aW1lclxyXG5cdFx0XHRwbGF5U291bmQoKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5tb2RlID09PSBNb2RlLlBvbW8pIHtcclxuXHRcdFx0aWYgKHRoaXMucG9tb3NTaW5jZVN0YXJ0ICUgdGhpcy5zZXR0aW5ncy5sb25nQnJlYWtJbnRlcnZhbCA9PT0gMCkge1xyXG5cdFx0XHRcdFx0dGhpcy5zdGFydFRpbWVyKE1vZGUuTG9uZ0JyZWFrKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGhpcy5zdGFydFRpbWVyKE1vZGUuU2hvcnRCcmVhayk7XHJcblx0XHRcdFx0fVxyXG5cdFx0fSBlbHNlIHsgLy9zaG9ydCBicmVhay4gbG9uZyBicmVhaywgb3Igbm8gdGltZXJcclxuXHRcdFx0dGhpcy5zdGFydFRpbWVyKE1vZGUuUG9tbyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKlNlbmRzIG5vdGlmaWNhdGlvbiBjb3JyZXNwb25kaW5nIHRvIHdoYXRldmVyIHRoZSBtb2RlIGlzIGF0IHRoZSBtb21lbnQgaXQncyBjYWxsZWQqL1xyXG5cdG1vZGVTdGFydGluZ05vdGlmaWNhdGlvbigpOiB2b2lkIHtcclxuXHRcdHZhciB0aW1lID0gdGhpcy5nZXRUb3RhbE1vZGVNaWxsaXNlY3MoKTtcclxuXHRcdHZhciB1bml0OiBzdHJpbmc7XHJcblxyXG5cdFx0aWYgKHRpbWUgPj0gTUlMTElTRUNTX0lOX01JTlVURSkgeyAvKmRpc3BsYXkgaW4gbWludXRlcyovXHJcblx0XHRcdHRpbWUgPSBNYXRoLmZsb29yKHRpbWUgLyBNSUxMSVNFQ1NfSU5fTUlOVVRFKTtcclxuXHRcdFx0dW5pdCA9ICdtaW51dGUnO1xyXG5cdFx0fSBlbHNlIHsgLypsZXNzIHRoYW4gYSBtaW51dGUsIGRpc3BsYXkgaW4gc2Vjb25kcyovXHJcblx0XHRcdHRpbWUgPSBNYXRoLmZsb29yKHRpbWUgLyAxMDAwKTsgLy9jb252ZXJ0IHRvIHNlY3NcclxuXHRcdFx0dW5pdCA9ICdzZWNvbmQnO1xyXG5cdFx0fVxyXG5cclxuXHRcdHN3aXRjaCAodGhpcy5tb2RlKSB7XHJcblx0XHRcdGNhc2UgKE1vZGUuUG9tbyk6IHtcclxuXHRcdFx0XHRuZXcgTm90aWNlKGBTdGFydGluZyAke3RpbWV9ICR7dW5pdH0gcG9tb2Rvcm8uYCk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2FzZSAoTW9kZS5TaG9ydEJyZWFrKTpcclxuXHRcdFx0Y2FzZSAoTW9kZS5Mb25nQnJlYWspOiB7XHJcblx0XHRcdFx0bmV3IE5vdGljZShgU3RhcnRpbmcgJHt0aW1lfSAke3VuaXR9IGJyZWFrLmApO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNhc2UgKE1vZGUuTm9UaW1lcik6IHtcclxuXHRcdFx0XHRuZXcgTm90aWNlKCdRdWl0dGluZyBwb21vZG9ybyB0aW1lci4nKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0bW9kZVJlc3RhcnRpbmdOb3RpZmljYXRpb24oKTogdm9pZCB7XHJcblx0XHRzd2l0Y2ggKHRoaXMubW9kZSkge1xyXG5cdFx0XHRjYXNlIChNb2RlLlBvbW8pOiB7XHJcblx0XHRcdFx0bmV3IE5vdGljZShgUmVzdGFydGluZyBwb21vZG9yby5gKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRjYXNlIChNb2RlLlNob3J0QnJlYWspOlxyXG5cdFx0XHRjYXNlIChNb2RlLkxvbmdCcmVhayk6IHtcclxuXHRcdFx0XHRuZXcgTm90aWNlKGBSZXN0YXJ0aW5nIGJyZWFrLmApO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXRUb3RhbE1vZGVNaWxsaXNlY3MoKTogbnVtYmVyIHtcclxuXHRcdHN3aXRjaCAodGhpcy5tb2RlKSB7XHJcblx0XHRcdGNhc2UgTW9kZS5Qb21vOiB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0dGluZ3MucG9tbyAqIE1JTExJU0VDU19JTl9NSU5VVEU7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2FzZSBNb2RlLlNob3J0QnJlYWs6IHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5zZXR0aW5ncy5zaG9ydEJyZWFrICogTUlMTElTRUNTX0lOX01JTlVURTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjYXNlIE1vZGUuTG9uZ0JyZWFrOiB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0dGluZ3MubG9uZ0JyZWFrICogTUlMTElTRUNTX0lOX01JTlVURTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvL2hhbmRsZSBNb2RlLk5vVGltZXI/XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRhc3luYyBsb2dQb21vKCk6IFByb21pc2U8dm9pZD4ge1xyXG5cdFx0Y29uc3QgZmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCh0aGlzLnNldHRpbmdzLmxvZ0ZpbGUpO1xyXG5cdFx0dmFyIGxvZ1RleHQgPSBtb21lbnQoKS5mb3JtYXQodGhpcy5zZXR0aW5ncy5sb2dUZXh0KTtcclxuXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5sb2dBY3RpdmVOb3RlID09PSB0cnVlKSB7XHJcblx0XHRcdGxvZ1RleHQgPSBsb2dUZXh0ICsgXCIgXCIgKyB0aGlzLmFwcC5maWxlTWFuYWdlci5nZW5lcmF0ZU1hcmtkb3duTGluayh0aGlzLmFjdGl2ZU5vdGUsICcnKTtcclxuXHRcdH1cclxuXHJcblx0XHQvL3RoaXMgaXMgYSBzaW4sIHBsZWFzZSBmaXggaXQgc28gdGhhdCBpdCBjaGVja3MgZm9yIGJlaW5nIGEgZm9sZGVyIHdpdGhvdXQgZG9pbmcgdGVycmlibGUgdGhpbmdzXHJcblx0XHRpZiAoIWZpbGUpIHsgLy9pZiBubyBmaWxlLCBjcmVhdGVcclxuXHRcdFx0Y29uc29sZS5sb2coXCJDcmVhdGluZyBmaWxlXCIpO1xyXG5cdFx0XHRhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGUodGhpcy5zZXR0aW5ncy5sb2dGaWxlLCBcIlwiKTtcclxuXHRcdH1cclxuXHJcblx0XHRhd2FpdCB0aGlzLmFwcGVuZEZpbGUodGhpcy5zZXR0aW5ncy5sb2dGaWxlLCBsb2dUZXh0KTtcclxuXHJcblx0fVxyXG5cclxuXHQvL2Zyb20gTm90ZSBSZWZhY3RvciBwbHVnaW5cclxuXHRhc3luYyBhcHBlbmRGaWxlKGZpbGVQYXRoOiBzdHJpbmcsIG5vdGU6IHN0cmluZykge1xyXG5cdFx0bGV0IGV4aXN0aW5nQ29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIucmVhZChmaWxlUGF0aCk7XHJcblx0XHRpZiAoZXhpc3RpbmdDb250ZW50Lmxlbmd0aCA+IDApIHtcclxuXHRcdFx0ZXhpc3RpbmdDb250ZW50ID0gZXhpc3RpbmdDb250ZW50ICsgJ1xccic7XHJcblx0XHR9XHJcblx0XHRhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLndyaXRlKGZpbGVQYXRoLCBleGlzdGluZ0NvbnRlbnQgKyBub3RlKTtcclxuXHR9XHJcblxyXG5cclxuXHRvbnVubG9hZCgpIHtcclxuXHRcdGNvbnNvbGUubG9nKCdVbmxvYWRpbmcgc3RhdHVzIGJhciBwb21vZG9ybyB0aW1lcicpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG5cdH1cclxufVxyXG5cclxuLypSZXR1cm5zIFtISDpdbW06c3MgbGVmdCBvbiB0aGUgY3VycmVudCB0aW1lciovXHJcbmZ1bmN0aW9uIG1pbGxpc2Vjc1RvU3RyaW5nKG1pbGxpc2VjczogbnVtYmVyKTogc3RyaW5nIHtcclxuXHR2YXIgZm9ybWF0ZWRDb3VudERvd246IHN0cmluZztcclxuXHJcblx0aWYgKG1pbGxpc2VjcyA+PSA2MCAqIDYwICogMTAwMCkgeyAvKiA+PSAxIGhvdXIqL1xyXG5cdFx0Zm9ybWF0ZWRDb3VudERvd24gPSBtb21lbnQudXRjKG1pbGxpc2VjcykuZm9ybWF0KCdISDptbTpzcycpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRmb3JtYXRlZENvdW50RG93biA9IG1vbWVudC51dGMobWlsbGlzZWNzKS5mb3JtYXQoJ21tOnNzJyk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZm9ybWF0ZWRDb3VudERvd24udG9TdHJpbmcoKTtcclxufVxyXG5cclxuLy9zb3JyeSBmb3IgdGhlIGhvcnJpYmxlIGxvbmcgc3RyaW5nLCBzcGxpdHRpbmcgaXQgb3V0IGludG8gYSBmaWxlIHRoZSBvYnZpb3VzIHdheSBkaWRuJ3Qgd29ya1xyXG5mdW5jdGlvbiBwbGF5U291bmQoKSB7XHJcblx0Y29uc3QgYXVkaW9VcmwgPSAnZGF0YTphdWRpby9vZ2c7YmFzZTY0LFQyZG5Vd0FDQUFBQUFBQUFBQUNFNnM4aUFBQUFBRkNhZk00QkhnRjJiM0ppYVhNQUFBQUFBU0pXQUFBQUFBQUFON0FBQUFBQUFBQ3BBVTluWjFNQUFBQUFBQUFBQUFBQWhPclBJZ0VBQUFEMVorWEpEanYvLy8vLy8vLy8vLy8vLy8vRkEzWnZjbUpwY3lzQUFBQllhWEJvTGs5eVp5QnNhV0pXYjNKaWFYTWdTU0F5TURFeU1ESXdNeUFvVDIxdWFYQnlaWE5sYm5RcEFBQUFBQUVGZG05eVltbHpJa0pEVmdFQVFBQUFHRUlRS2dXdFk0NDZ5QlVoakJtaW9FTEtLY2NkUXRBaG95UkRpRHJHTmNjWVkwZTVaSXBDeVlIUWtGVUFBRUFBQUtRY1YxQnlTUzNubkhPakdGZk1jZWdnNTV4ejVTQm56SEVKSmVlY2M0NDU1NUp5ampIbm5IT2pHRmNPY2lrdDU1eHpnUlJIaW5HbkdPZWNjNlFjUjRweHFCam5uSE50TWJlU2NzNDU1NXh6NWlDSFVuS3VOZWVjYzZRWVp3NXlDeVhubkhQR0lHZk1jZXNnNTV4empEVzMxSExPT2VlY2M4NDU1NXh6empubm5IT01NZWVjYzg0NTU1eHpiakhuRm5PdU9lZWNjODQ1NXh4enpqbm5uSE1nTkdRVkFKQUFBS0NoS0lyaUtBNFFHcklLQU1nQUFCQkFjUlJIa1JSTHNSekwwU1FOQ0ExWkJRQUFBUUFJQUFDZ1NJYWtTSXFsV0k1bWFaNG1lcUlvbXFJcXE3SnB5cklzeTdMcnVpNFFHcklLQUVnQUFGQlJGTVZ3RkFjSURWa0ZBR1FBQUFoZ0tJcWpPSTdrV0pLbFdaNEhoSWFzQWdDQUFBQUVBQUJRREVleEZFM3hKTS95UE0velBNL3pQTS96UE0velBNL3pQTS96UEEwSURWa0ZBQ0FBQUFDQ0tHUVlBMEpEVmdFQVFBQUFDQ0VhR1VPZFVoSmNDaFpDSEJGREhVTE9RNm1sZytBcGhTVmowbE9zUVFnaGZPODk5OTU3NzRIUWtGVUFBQkFBQUdFVU9JaUJ4eVFJSVlSaUZDZEVjYVlnQ0NHRTVTUll5bm5vSkFqZGd4QkN1Sng3eTduMzNuc2dOR1FWQUFBSUFNQWdoQkJDQ0NHRUVFSUlLYVNVVWtncHBwaGlpaW5ISEhQTU1jY2dnd3d5NktDVFRqckpwSkpPT3Nva280NVNheW0xRkZOTXNlVVdZNjIxMXB4enIwRXBZNHd4eGhoampESEdHR09NTWNZWUl3Z05XUVVBZ0FBQUVBWVpaSkJCQ0NHRUZGSklLYWFZY3N3eHh4d0RRa05XQVFDQUFBQUNBQUFBSEVWU0pFZHlKRWVTSk1tU0xFbVRQTXV6UE11elBFM1VSRTBWVmRWVmJkZjJiVi8yYmQvVlpkLzJaZHZWWlYyV1pkMjFiVjNXWFYzWGRWM1hkVjNYZFYzWGRWM1hkVjNYZ2RDUVZRQ0FCQUNBanVRNGp1UTRqdVJJanFSSUNoQWFzZ29Ba0FFQUVBQ0FvemlLNDBpTzVGaU9KVm1TSm1tV1ozbVdwM21hcUlrZUVCcXlDZ0FBQkFBUUFBQUFBQUNBb2lpS296aU9KRm1XcG1tZXAzcWlLSnFxcW9xbXFhcXFhcHFtYVpxbWFacW1hWnFtYVpxbWFacW1hWnFtYVpxbWFacW1hWnFtYVpxbWFRS2hJYXNBQUFrQUFCM0hjUnhIY1J6SGNTUkhraVFnTkdRVkFDQURBQ0FBQUVOUkhFVnlMTWVTTkV1elBNdlRSTS8wWEZFMmRWTlhiU0EwWkJVQUFBZ0FJQUFBQUFBQUFNZHpQTWR6UE1tVFBNdHpQTWVUUEVuVE5FM1RORTNUTkUzVE5FM1RORTNUTkUzVE5FM1RORTNUTkUzVE5FM1RORTNUTkUzVE5FM1RORTBEUWtOV0FnQmtBQUFRazVCS1RyRlhSaW5HSkxSZUtxUVVrOVI3cUpoaVREcnRxVUlHS1FlNWgwb2hwYURUM2pLbGtGSU1lNmVZUXNnWTZxR0RrREdGc05mYWM4Kzk5eDRJRFZrUkFFUUJBQURHSU1ZUVk4Z3hKaVdERWpISEpHUlNJdWVjbEU1S0pxV2tWbHJNcElTWVNvdVJjMDVLSnlXVFVsb0xxV1dTU21zbHBnSUFBQUljQUFBQ0xJUkNRMVlFQUZFQUFJZ3hTQ21rRkZKS01hZVlRMG9weDVSalNDbmxuSEpPT2NlWWRCQXE1eGgwRGtxa2xIS09PYWVjY3hJeUI1VnpEa0ltblFBQWdBQUhBSUFBQzZIUWtCVUJRSndBQUlDUWM0b3hDQkZqRUVJSktZVlFVcXFjazlKQlNhbURrbEpKcWNXU1VveVZjMUk2Q1NsMUVsSXFLY1ZZVW9vdHBGUmphUzNYMGxLTkxjYWNXNHk5aHBSaUxhblZXbHFydWNWWWM0czE5OGc1U3AyVTFqb3ByYVhXYWsydDFkcEphUzJrMW1KcExjYldZczBweHB3ekthMkZsbUlycWNYWVlzczF0Wmh6YVMzWEZHUFBLY2FlYTZ5NXg1eURNSzNWbkZyTE9jV1llOHl4NTVoekQ1SnpsRG9wclhWU1drdXQxWnBhcXpXVDBscHByY2FRV29zdHhweGJpekZuVWxvc3FjVllXb294eFpoeml5M1gwRnF1S2NhY1U0czV4MXFEa3JIMlhscXJPY1dZZTRxdDU1aHpNRGJIbmp0S3VaYldlaTZ0OVY1ekxrTFczSXRvTGVmVWFnOHF4cDV6enNIWTNJTVFyZVdjYXV3OXhkaDc3amtZMjNQd3JkYmdXODFGeUp5RDBMbjRwbnN3UnRYYWc4eTFDSmx6RURyb0luVHd5WGlVYWk2dDVWeGE2ejNXR256Tk9RalJXdTRweHQ1VGk3M1hucHV3dlFjaFdzczl4ZGlEaWpING1uTXdPdWRpVkszQng1eURrTFVXb1hzdlN1Y2dsS3ExQjVsclVETFhJblR3eGVpZ2l5OEFBR0RBQVFBZ3dJUXlVR2pJaWdBZ1RnQ0FRY2c1cFJpRVNpa0lvWVNVUWlncFZZeEp5SmlEa2pFbnBaUlNXZ2dsdFlveENKbGpVakxIcElRU1dpb2x0QkpLYWFtVTBsb29wYldXV293cHRSWkRLYW1GVWxvcnBiU1dXcW94dFZaanhKaVV6RGtwbVdOU1NpbXRsVkphcXh5VGtqRW9xWU9RU2lrcHhWSlNpNVZ6VWpMb3FIUVFTaXFweEZSU2FhMmswbElwcGNXU1Vtd3B4VlJiaTdXR1Vsb3NxY1JXVW1veHRWUmJpekhYaURFcEdYTlNNdWVrbEZKU0s2VzBsamtucFlPT1N1YWdwSkpTYTZXa0ZEUG1wSFFPU3NvZ28xSlNpaTJsRWxNb3BiV1NVbXlscE5aYWpMV20xRm90SmJWV1VtcXhsQkpiaXpIWEZrdE5uWlRXU2lveGhsSmFhekhtbWxxTE1aUVNXeWtweHBKS2JLM0ZtbHRzT1laU1dpeXB4RlpLYXJIVmxtTnJzZWJVVW8wcHRacGJiTG5HbEZPUHRmYWNXcXMxdFZSamE3SG1XRnR2dGRhY095bXRoVkphS3lYRm1GcUxzY1ZZY3lnbHRwSlNiS1drR0Z0c3ViWVdZdytodEZoS2FyR2tFbU5yTWVZWVc0NnB0VnBiYkxtbTFHS3R0ZlljVzI0OXBSWnJpN0htMGxLTk5kZmVZMDA1RlFBQU1PQUFBQkJnUWhrb05HUWxBQkFGQUFBWXd4aGpFQnFsbkhOT1NvT1VjODVKeVp5REVFSkttWE1RUWtncGMwNUNTaTFsemtGSXFiVlFTa3F0eFJaS1NhbTFGZ3NBQUNod0FBQUlzRUZUWW5HQVFrTldBZ0JSQUFDSU1Vb3hCcUV4UmlubklEVEdLTVVZaEVvcHhweVRVQ25GbUhOUU1zZWNnMUJLNXB4ekVFb0pJWlJTU2tvaGhGSktTYWtBQUlBQ0J3Q0FBQnMwSlJZSEtEUmtSUUFRQlFBQUdHT2NNODRoQ3AybHpsSWtxYVBXVVdzb3BScExqSjNHVm52cnVkTWFlMjI1TjVSS2phbldqbXZMdWRYZWFVMDl0eHdMQUFBN2NBQUFPN0FRQ2cxWkNRRGtBUUFReGlqRm1IUE9HWVVZYzg0NTV3eFNqRG5ubkhPS01lZWNneEJDeFpoenprRUlJWFBPT1FpaGhKSTU1eHlFRUVyb25JTlFTaW1sZE01QkNLR1VVanJuSUlSU1NpbWRjeEJLS2FXVUFnQ0FDaHdBQUFKc0ZObWNZQ1NvMEpDVkFFQWVBQUJnREVMT1NXbXRZY3c1Q0MzVjJEREdISlNVWW91Y2c1QlNpN2xHekVGSUtjYWdPeWdwdFJoczhKMkVsRnFMT1FlVFVvczE1OTZEU0ttMW1vUE9QZFZXYzgrOTk1eGlyRFhuM25NdkFBQjN3UUVBN01CR2tjMEpSb0lLRFZrSkFPUUJBQkFJS2NXWWM4NFpwUmh6ekRubmpGS01NZWFjYzRveHhweHp6a0hGR0dQT09RY2hZOHc1NXlDRWtESG1uSE1RUXVpY2N3NUNDQ0YwemprSElZUVFPdWVnZ3hCQ0NKMXpFRUlJSVlRQ0FJQUtIQUFBQW13VTJaeGdKS2pRa0pVQVFEZ0FBQUFoaEJCQ0NDR0VFRUlJSVlRUVFnZ2hoQkJDQ0NHRUVFSUlJWVFRUWdnaGhCQkNDQ0dFRUVJSUlZUVFRZ2doaEJCQ0NDR0VFRUlJSVlRUVFnZ2hoQkJDQ0NHRUVFSUlJWVFRUWdnaGhCQkNDQ0dFRUVJSUlZUVFRZ2doaEJCQ0NDR0VFRUlJSVlRUVFnZ2hoQkJDQ0NHRUVFSUlJWVFRUXVpY2M4NDU1NXh6empubm5IUE9PZWVjYzg0NUp3REl0OElCd1AvQnhobFdrczRLUjRNTERWa0pBSVFEQUFBS1FTaWxZaEJLS1NXU1Rqb3BuWk5RU2ltUmcxSks2YVNVVWtvSnBaUlNTZ2lsbEZKS0NCMlVVa0lwcFpSU1NpbWxsRkpLS2FXVVVqb3BwWlJTU2ltbGxNbzVLYVdUVWtvcHBVVE9TU2tobEZKS0thV0VVa29wcFpSU1NpbWxsRkpLS2FXVVVrb3BwWVFRUWdnaGhCQkNDQ0dFRUVJSUlZUVFRZ2doaEJCQ0NDR0VFRUlJSVlRUVFnZ2hoQUlBdUJzY0FDQVNiSnhoSmVtc2NEUzQwSkNWQUVCSUFBQ2dGSE9PU2dncGxKQlNxSmlpamtJcEthUlNTZ29SWTg1SjZoeUZVRklvcVlQS09RaWxwSlJDS2lGMXprRUhKWVdRVWdraGxZNDY2Q2lVVUZJcUpaVFNPU2lsaEJSS1NpbVZrRUpJcVhTVVVpZ2xsWlJDS2lHVlVrcElKWlVRU2dxZHBGUktDcW1rVkZJSW5YU1FRaWNscEpKS0NxbVRsRklxSmFXVVNrb2xkRkpDS2ltbEVFSktxWlFRU2tncHBVNVNTYW1rRkVJb0lZV1VVa29scFpKS1NpR1ZWRUlKcGFTVVVpaWhwRlJTU2ltbGtsSXBBQURnd0FFQUlNQUlPc21vc2dnYlRiandBQlFhc2hJQUlBTUFRSlIwMW1tblNTSUlNVVdaSncwcHhpQzFwQ3pERUZPU2lmRVVZNHc1S0VaRERqSGtsQmdYU2dpaGcySThKcFZEeWxCUnViZlVPUVhGRm1OODc3RVhBUUFBQ0FJQUJJUUVBQmdnS0pnQkFBWUhDQ01IQWgwQkJBNXRBSUNCQ0prSkRBcWh3VUVtQUR4QVJFZ0ZBSWtKaXRLRkxnZ2hnblFSWlBIQWhSTTNucmpoaEE1dEVBQUFBQUFBRUFEd0FRQ1FVQUFSRWRITVZWaGNZR1JvYkhCMGVIeUFoQVFBQUFBQUFBZ0FmQUFBSkNKQVJFUTBjeFVXRnhnWkdoc2NIUjRmSUNFQkFBQUFBQUFBQUFCQVFFQUFBQUFBQUNBQUFBQkFRRTluWjFNQUFJQktBQUFBQUFBQWhPclBJZ0lBQUFBQXc2THdLRmxnZm1CZGFXcGxmbWR1Wm1ObVlHeGtiR1ZuWjJ0d1gyWm9aMk5xYm1ObVoyWnJYMlZnWTJBOEg1T3U5TUorSENUQXNSVUJZRG5BZGdCQUZOV1V0dVhWd1V1ZXdiMUhZK1lJK21IdDB3TWhtdVhWRnJCNHZxcWMvSHVoZ2Zudi8xYVYwc0dZNENNakFueTRzTDlBUFYrcitPWGJEWUNPYzl5dytTSEltT2Z4R0N3dlV5NUV1d2NBQUZBQlI0dkIwQTZiemdZb09nOEU3Sk1hVk9EbWtoZHNzT1IxSmR3TEJYVDlDMm53ZFZGZC9VOWFvYjl0UjhFdkh3aUR2Mmdqd0haSGVmVXBmNjlBWHIyS2luL29JNUJUcHVPWGozM2V2U3BWV2ZSUkdFQTdBUG9ZS2dwWmgrN2QzK1dkNGQwQWVBMkF3QTNOQUdnQUhBajhBaHNBbmdXQUhRY2VRRlBpeWxEQTdaL0FDOEdoQUtEeTRTUUJBREs4L1M4QWdPVDYyYWdDQU5SYlZBQ0FoOTM5d2dJd3NpOFJBTUQvVGdFQUFZTDl4d0hBbys5T0FsQUE0VENOQXhEOTR6cHJHZ0RJK2ZKRkJnRDhDWUJ0WFA1WjhUWVNBUDdJS2JUM3ErczJKOGRxUlBBR2dDYUFHendEbWdFYkZMWUZXQUFlQkVnQUlOMk1BSVJQVVFjQWdKODdBUURBeHdzQUFENmxBUUJnSVFBQUlBSUFKNU1BQUVBbkF5Z0FBRzYxRXdYQTRaZ3FJQUJGMlh4SEFJQVJBREFzWUU4U0FCN0p5Vks1cGlxVG5ocUs3Z2JBMXlFQVZNQlRJQUFidE9JQUxJRFlRQUJJUUFBd1hSaG9BQUJROVNRQUFIUGpBQUFJVmdBQU9GUUFBUHpNSGdDK1J3QUFvQ1lCUFFBQXNMQVhBQURLUHFQQUNBQUFaUUQ4RVFDY256OHdFZGJJS2F4V20wQk1Pc2dkQ0c4QTV2YUFiOERUQkJvQkczU2NEbGlBOXlBQUFDUVFSV0RPcjlPeUNRa0ExTldsUUFDa0duWXVMQUFBYUZuSEFnRUFHREVCQUdEY0tnQ1V2UUFBMEQ4Q1VRQVVvRDdhQlJRVVFOQXBDamdnMklrSkFIQXRBS0FFZ1A4Q0FCVEZoTG1oK01GdDdQVjZCQ1NCODdzVFlIYzJ3dy9BRCtEQXJxUitmVGU1bnpmUDk4RGkrYWtaU0FWVlp5K3RkUzMxL1BHZnJmV0RVTFdnbXVZY0VKeDhNWEx4V2c5Yy9HTC85TVcrRVFFWTdCa1JBUENkenlZRUFNQ2Z1eFlKYWtkYWVQNXoxeW9ESEFja3piQ3VaZU5QME9nVjRBTWQyb205QUFOdzFBWTRLRnlnT0FCdTRIeVVVbGFhMGZFNU1Sc0NiRzJKUVA5Qy9leWxRZ2hoczhCbEJBajZPNjhVZ08xb3IveEFRb2UwdUFMNTAvNWhWUXBlV0o4R2dBZGJBT0Rqd2JRQTBGZ0FnTjhQS3hrQUFOcElYR25HdkZHSjRrdUkzRzRBdk02Z0FJQjNUYUFZZUJpQTRRWUFCUURqQXpZUFJNUHJTak1BcnAwREhTUmg2STBCN2lRQUFQanBxQXdBSU5JcnhQTUxBUm9CQUtBV1dRQUFjSUI2RTRCcUJBQmdiaTFJTVFVQUNJQjhhaGMvNGdvQU1FTmxlVnNTQVFlQWNJV3IrWVVlQjd4bkEzeHJBT2hodUg0NUpON29XeW1ObzFFUlRTeHpBK0JuY0FIY1VBRXdGRHhzQXVBQXV5cDB3T2dORlJJQTFsY0djUGkzQUxVTkFBRHhVd0FBNFBNTWtCQUJwZ0FBVVB2c0FBREFGZUFiZ0VwVkFBRG1BTGpMQkFDQVdRRlFoUDdtQitDckRKMkE5M0VBbkU4QklBR0F2eFBleUp1bTJ0R29nQ3FXdWdId091RVN1S0VBSUdpR2h3MEE3QUdBaWhGZzlsVUFMUUFBdmM4L0RmRDdxQUIyQUFBUW13TUFBSk5OZ052YkFBSUZBTUQvU2dJQUFGZUE3d0JnYlFBQTRHcFVtR3dBQUVDWkFBQUF2RG9BcUFSdjdBRitXWVpPQUY0bEFRRHNTQUlnQU43b213YjdLQ0FqR1l2ZEFKZ21RQVVBVHpOQXdJSENCZ3pqQTQ0RG9xRUZBTUQyMWhyZ1pxVUtWQ01BQUJpT0ZnQUE3RzhBZEpzQVF3QUE4TjBJQUdVQkFJRFh1NENkQmdBQXlnVDhWd0F3QVlCTytCY0FELzdOQXVEM0JJQ2ZpZ0hVQVlBbkFkN0ltNmJHM0FBYXVBSHcxY2NYOERTQW9lQkF4d0hhRkE0d2UwTUZBS0FLZFFYUS93VlFFd0VBNERqUkFRQmdUd053SVFCb0JBQUFKdHNEZ0xjQkFNRDF0Y0RYQ0FBQW1JQWkvQ3NBZ0JxTXltK0F5eEpJQUY0TEFOQ2pBVUFCQVBzNEFkN0ltNmJXdkFBcTJBMkFyOE5BQVFEUGdHTGd3T0FBblJGZ3hpcUFDaWtTeUdxM29RSkRyd0trTHdBQVhOMmRBUUFnSFFHYUFwZ0JBR0ErS3dEd2RnQUEyRG9VK0ZjQUFLQk1BQUFBWGdIWUlud0tBS0FJcXRrbjRMOENiQUR3U2dCNHp3TTBBTDY0bXliR3ZJQlN3UTBBVFlsckFwNUdrRFRBZ1Uxc3dENXpkRjhsTFFGQTMxY0xmbmliQUg0SUFBRExFUUFBOUo4MndGOUtCQkFGQUtDUzBnQlFpUUFBY1BNWndDWjhxZ0ZxWHVVRStGRUdZQlA3QVFMd25oMEFPUUlBQlhCR0JKNm9tNmJhMFNpTktpSnpBK0IxUUFKUEV3Z1NEaXdjWUVmaEFBdkFXQVZRQVFsQS8xMGlnZmNYRkNBVkFBQkNId0FBZ0VzdFFDKzJBUFFBQU1CbEd3Q29CQUFBK1BPbytLRUNBRUEyQVFCN0J3QUFBQUR5dHdNczJBb0E0QkpVOHdQWWYwWG9BSUFZQlFBcUE1Nm9XeW1OK1JhRFZzWjY5QWJBVHpNK2dSc3FBSXFCaHdMQUJuVG1pSVlLaVFUb1JhUUE3NStiUUkwQkFJRHFBd0FBbkF1QTNOWUFxQUFBNEpJSUFBQWxBTmdCZUJzQUFEWGQ0OENOVi9rQzVRSUFtL0FwUWlmZ0p5dGdWZ1ZRQVFCZEdBRitxRnNwcmVNV0ErRWNrYnNCb0FsOEEvQTBnS0hnUU9FQXV5bzhZTVFxZ0lySkVJRHdsMWNEYlAwUndFOEJBR0Q2bndNQVVLTVpjSnN3d0N3QUFMaGFBTUE3QVFEZ0p4RG51Z0FBWUhZRkFBRDNOeFZBd0htMEFJQXpxT1lkMEhOVU9JcUFuMHNBajRvRDFBRittRnRKdGVrV0E2cFlaamNBN2lGUUFNRFRESkJ3b09NQWl6bDdRd1VrQURXbHFRQzFNUVZBRndBQU5tTVpBQUR1TkFGV2JBQ3lBZ0RBeTFZQm9NWUJBS0RaWHdzRXZNWUF3QjJjc2dMOFloVUEyN1M2RE5zQWJDa0FBRVlEZ0FBQSsyNHNBSDZZbTViMi9JaVJTQnlSdXdIdzFjTU44QlJJbXVCQXh3RzJTdUVBc3pkVUFBQ3FMUkpnRzZDMkFBRFF4eGdCQU5EYkRZREpMWUJBQVFDbzUxWUJvSklBQU9EMWY0ZS9Rd0FBTUF2UUFiOFhBTlNnbWgrQTV6SW9BTkFWQWdEUVR3Q2dDZ0Q4Ynd4ZW1Gc3BqZmxSTmNxUXpHNEFURk9DQ2dDZUpqQVVIQmdjb0RNK1lFWkRoVkFJQUdzNXFBdlVZeXBnblFBQXNCVUxBQUF1TndDekEvUUFBRkRhSVFENENnQUFEQTROdUMwTkFBQUxBUnE4RGdDUTRKUjlndlc3Q0IwQXZDWUFuQW9BTlFEby92dElQb2hiS2JYNTFqWEtpTXdOZ05jMGZDUHdKQ2dHRGd3T3NLOEFjQUNHcndJQWtDdFdhNEh0WndwNEp3QUFNdDhSQVFEd0p4SGd5elFBQWdCQUJTMEE4RTRBQUhoOWF5bi90QU1BVUJVQ2VBV0FCZ0RvaEZjNUFTQVNxbmtMZ011S0NRRG94d0JRQVZCMlNSRmVpSnMyNTNHcm1rZ2NrdG9OZ0orQkxRRGdDWUNBaHdXQUErd3dIdUFBOUZVQUZhUTBnUDVZRWNEekpRWElLUUFBNUFNQ0FBQ1hESUJMSnNBTUFBQThzd01BQUJUQTdSV1l4d0VBNFBzM3dtRUVBSUFLSEhnUEFXQUNBQUFBOE9vQVlBQ24vQU9BaWdjQW9FZFBBRFFBUG5pYnBzYThWWTBxNWdiQWF3SVh3Tk1NVUhCZzRRQ2RPY0pYQVFESXBSY044UE9QQUhRQkFNQndHd0FBT0c4Q3RBSUFVUUFBK0dDbkFGUVNBQUNjM21rQUVsUUVBTGVnbWk4d1VnbkFGdEJ2QlZpQW4wVEFyV0lBRmNEY3NRSWVlRnNwamZuVUZhb0lOd0NtNmJobTRHa0F4Y0NCd2dGMlZYakFpSVlLSmhKSWNmNmlEckM0VnNCWEFRRHd3M0VBQU9EWEFmWm1nQjRBQUZ4ZEFlaVhBQURnUHRSNFhUY0FBSUFCYk1LOUlnQTRnMU0rUnFDSEVpZ0Fmc1lDektvQkpBRHdMd0llYUp1bTlyeFZSUlNPc0JzQVgxMVFBY0F6WUFnNEFIc0FvR0l1QUwyaFlxRUVZTFl1QVJoTlZTQVhBUUJnKzc0QkFJQmJBcEJxQllnQ0FJRGZaZ2NBYmdrQUFLbTJ1d0NRVXdBQWdBV2ZLZ0R3QUtxNUJuaGFHUUFGbGhJSUFNaFJBU0FBd1A0WUJ4NW9tNWJHUElTQUpzSU5nSHNZdm9DbkVhRGd3T0FBVzZWd2dOa2JLZ0FBbGYrY0ZxcC9BTUFHQUFEbUpBY0FnRWttNEMrRkFBb0FBUGhvQndCekdBQ0FlbnNxK05NUUFBQ29BV3pBdndZQU5UamxCK0JlRFowQVhKd3NBR0JlQTRBcUFJam5jUUQrWjF0cDJyUlVoVEtXMmcyQWJSSVVBUEEwQVF3Y0dCeWdNejVnOUlZS0NBQnkrVWdYR0hvVndBWUFBREJJQUFBQTloT2dZZ0hNQUFCUUtBQlVFZ0FBN1B4QXZXd0JBQUFYQVFHZlNnQXdEcXJwQ2V5L0Ftd0MzZ3NBK2dNQURRRDBId0hlVjFzcHJXT0ltbkNMcFc0QXZEYXVDYmloQW1BQUJ6WnhnS1VBc0FIMGhrcGFBdEM3dlFRTzd4Q2d4Z0VBSVA1QkFBREFOUUJmV0FFQ0JRQ2dkdXdBb0Y4Q0FJQ2JlK0F2RXdBQVBBM1Vkd0JRRVFBUWNLOEFBQ0xobEhmQSt4SUQ0TGdPQUFVQTVGRksvbGVibE1aUmFJMTZSTzRHd09zRUNkeFFBRkFrUEN3QUhHQ0g4UUFIb0s4Q3FJQUVvSHQ1a2dLOFgxQ2drZ0FBUU5FSEFBQytSb0FEQmtBUEFBQWtXQlFBQUJlQXNnUHdUZ1VBNE05UGd6OUVBQUJ3QWVwYkFVb0VBQUFBcUc4SEFBT281aDhBc2lJQVFGUUFnRHJlUjV1VzJ0eUVnTExJTWpjQU5JRlA0SVlEQUdEZ1FPRUFYVHFqb1VJQ0FPV3BBZDVmTmdFL0FnQ0E5ME1DQU1CNkFRZzFBQ29BQVBoU0tnRE1vd0FBMVBST0J4cDBCUUJ3QzA3NURZeDZBc0E1NEZPRURnQytyd0xBckRwQUJRRDA3UWkrUjFzcHRiblJHbVVzY3dQZzl2RU53Tk1BVUhDZ2NJQmRHUjh3b3FGaUVnRHNzYU1BVzM4RUlCa0FBS1k1QWdEQTNRcjRtakRBREFBQTdnNEFaUU1BQUE5ajRyVXBBQUFZQUhUQ2ViUUFnRE9vWnA5QTM1YkJBZmpKQW5oVUFrZ0FNUHhhRlFDZU4xdEpqYm1KaW5DTFpYWUQ0QjZBQWdDZVpsQWtIR2pGSGdDb3BMTTNWRUFDVU1YYkpiQ3dWWUFzQndDQXpma01BQUMvQUhSWkFMSUNBT0JuOWdCZ1hRQUFpTGRLUU1KckxBRGdEazc1SE1BTlJnRDBlZEZSRVNRQVNnRUE2TkVBSUFEQXZrVUF2aWVicHZZOHhFaGtTMHJkQUZCeEF6d0Zob0VESFFmWUtvVUR6TjVRUVdBQXRsaW1BclVONEVzQUFIRC8yZ01Bd01jTWNLQUY0QUFBUUx1OUFPQ2RDZ0NncjJjT1p3RUFBUFFBRWw0TEFDNUFOWDlCYzFHR1RRQzZWQU1BZW5RQXFBS0ErWE1NdmllYmxQWmM2RWhrakNWMkEyQTdRQVVBVHhOQXdZSEJBZllZQWVaWUJWQkJDQUdRMno4cTBFd1ZRQjhBQURickN3QUFKcGtBT1FJNEFBRFVUUWNBekVNQUFIaTluQmIrVGdNQVFLOEFBSUQ3VHdGc3dtc2NBQnhnZEw0SitIVUVOZ0I0TFFEQVBnTkFaUURlSjV1a3pua0lTa1dQQmRhTU53QmVDOThJUEkwQTRNQmdBNVowaHE4Q0pFQS8yd1hvbnlsUU93QUFzSWdPQUFCM0NNRC9hWUFTQUFCcVVBQ0FEUUFBYkU4VldIQXVKNkJtS08vQWp3T0FUdGJ2QkFGQWx4TUFzMm9BQldCRVJ0NG42eWZPbzlFUUV5TWE4UWJBTnVBRGVKckFFSEFBRG9BUllQYUdCQ2tCRUk4N0tNRGJuUWJnS3dBQUVOeFpBQUJ3WFFBdnRRQm1BQURnb0QwQStCUUFBTzd2aXZBV0FRREFGZGlBcnBnQWtLRE1Dc0J2MEF2QWpnQUFxSmdBcUFPQS9kMEF2aGVicE01amlhaW9FQkcrQVRBRkY4QU5GUUJGd1lIQ0FicDBoSzhDQUdDTkh3cnc4NWNBM2drQUFGNGZBd0NBdnlMQWNnQWdDZ0FBVDZ3QTRMWUFBREFkQ0xBQld4RUFURkRpQnhncEFDRFJid1dRZ0o4TTRGUU1vQUpZM0drQTNoZnJwNTdMcVdvVlBjWWE4UWJBWFZ3emNFTUJBQVlPRkRiZ0dSK1FveUhCU0FCYkx3T2NmRkNnTmdBQU1Id1BBQUIwR3dBVDB3QTlBQUQ0d2dDQWVRZ0FBTzhmbEhvRkFBQlFRTUM5RExCaEpEM0JGeE9jRFB3a0FiTUtRQUlBM3hFQXZoZnJOK2VsQ1VISGhGalgzQUNZQ2drOHpRQUJCem8yWURGbmIwaElDWUNON2F2QVlySUNkQUFBd1BBeUFBQnd0d0trV2dHaUFBREFyajBBaUEwQUFMUWlRQWY4cXdJNERPVUExV1VBRkNGTHNBRkFWQUFBTUFJQU5RQ3dmeDhBVDJkblV3QUFnS0lBQUFBQUFBQ0U2czhpQXdBQUFMRlU5TFFzWW1CaFkyQmhZR0pnWTJKZlkxMWdYR0JlVzE5ZFhGdGhYRjVmWGw1Y1hsOWZYVnRkV1YxWFdseFhXRkhlQjZ0TDV6SEVxcUtIV01mY0FOaUtMK0FwVUJRY2dBMDR4Z1BNN2tzQUFVRHpnZ3IwRHdDK0NnQUEwdzRBQU9BeEFQeFNDS0FBQUlBL2RnRFFUd0VBNE9FL3dYOEZBQUJLZ1FiL0dtQXlrai9BbGtBQWNENVpBRUNNQWdCVlFQMEdBdDRIcTFQUHNjVks5MmdSWFhVRDRBMEU4QXdZQmc0TU5xQXpSNndDU0FBQTh1Z09ZQ2xKZ05vRkFJQ0JCUUFBZURrREZUTkFBUUJBOVFJQTJBSUF3TmJmQUFBQStDc0tOUGhVQWp3WXlnUGVYd0JnRS9zcFFDL2dQUStZVlFFMEFONzNxbFAzWmRHZDJCYlJwVGNBdHVDYWdLY1JBQndZYk1CaXptaElBQUQ2MktrQzNIOHBnTmdBQUVEekRBQUFTREVCdnJBQ3VBSUFVRnUyQUZBOUFBQ016Z0FTN2lXQW1wR2NCSDh0QXJDSi9SZVFDVUNYR3dDUGlnTVVBSkJES1FIKzl5cFM3K3NXdTRwdHNRNjhBVEFOa01BVEFBa0hGZzV3akFlWXZTRUJBQkEvZGhYZzVrd0JQd01BZ05BaEFBRHdlUWpRT3kwQURnQUFMTmtCQURZQUFQRDdOL2lQQWdCQUtTQmhLd0NBQkNXdUFldy9JQUhZTWdCQVZBQ0FPZ0RZL3dMZTE2b1M3OHVwVm1KQ1JPb0d3TzFDQWsrQ1llQUFIS0JMWjI5SVNBQ28xdWNFOEh1alFJMERBSUNlRkFBQVhCZkFTQUdvQUFEZ0gxSUJvQzhBQUJBQmtOQVZBTUFZS1BNRDNMQUV3QjM4SzhJR0FOOVZBQUQ5QkFBcUFDQytxZ0QrNXlwU244c3BWaFU3UkVSdkFFekZCL0EwZ0tMZ1FPRUFHQitRb3lGQkFvRE5mMG5nK21VQlNBSUFnUG1jQXdEQVh4SGdmQmlnQUFEQUt3d0EyQUlBd091M3dHc0dBSUJ5WU1INUpBQmdBQ1Y2Z3A5RUFwd3NnRWNGZ0FRQS9Wd0YzdGVxVXAvTEtWUml4NUJXdlFHZ0VRSjRCaURoUUdFRGxuVDJoZ1FwQVVtT0JhckFZSjBCK0JFQUFMYkNCUUFBM1FhQW5RVUFCUURBbjFvQVlPNEJBS0NKQ2l4NFRZRERTTjZCVWhVQTJ6REwwQXVBa3dBQTlBa0ExQUNBUHlJQS90ZUtwZmM4eEVDZllCR3RkUVBndFhHQXB3QUdEblJzQU1ZRGpPNUxBQUR5NlU0Qzh5OEF5UUFBc0ZqdkFBRHdUd053ZXdQZ0FBQkFvcjBBZ0EwQUFOeC80ZkRyQUFBd0M3QUJ2dytBeVZCV0FPb3lkQUxlVnhRQVJnZUFLdUM4ekFIKzEvS3B6OUhFU085b3NkV0RieUNCcHdrVUJRY0dHOUNsT1ZZQkZCQUE2dWN2QVdLbkFqVUJBQUFHTndVQUFQY09rQ09BQXdCQTNiUUJRRDhEQU1EbXFRQUFBUGgzQVNqQTZ4VGd3VWgrZ1A4YkEyQ0RqNGxPQnQ0TDRGUUUwQUQreC9LbDM2WFJVZlVPR0kxekEwQURIdkFrR01EREFHQURGbk9HTHdFQW9GT3JBRmRmQXZncEFBQTBleDBBQUY1T0E3eGdBSlFBQU1EbEZnQUF1QUQwOWdxb0xRQUFES2NLckRLVWsrQ3Y0d0Jzd2ZKS1VBUFFveDhBbUZVREtBQWplZ1QreC9MTjc1SlUxM0VDR3VzR3dQUWhnQ2NBd0FNQWJNQXhIbUQyaGdRSkFEYjdLSUNmUFFKZ0N3QUFNZ0FBQU94TWdQTUtVQUFBZ01VZUFBQmNBTnhlZ2JrSEFJQ2ZQdzVmSXdBQVZBQjBqT1FLOEJzSUFIWUVBTUNvQUZBSEFQdnJBUDYzc3FuZk5lbW9ZNGVJVnI0QmNIc1F3Tk1NVUhDZ3NBR2RPWHBEQWdCUWJZOGw4UFlnd0R3Q0FBRERkd0FBNEdVQk9Ba0FSQUVBNE1FS0FOZ0lBQUNTRnFEQlZnU29HY29mZUhvbEFBTGVBaHJnSndYQVZnTkFBRUQzdTBvQS9xZlNpZC9oZEZYZG84VmE4UWFBUmx3Q1R3TVlCZzRVRG9EeEFUa2FFZ3dBM05kU0xmRDRUQUZmQVFDQTZTb0FBUEJhQUxlbEFSd0FBUHpFQUlCK0FRQUE3MytVZXMwQUFJQUJkTUs5REFBR1VPWUJYMHdnd3U4c2dGa1pJQUZBZnhjQy9yZXlxZDhscVVwc2kyamxHd0RiQVFrOEF3QU93QVlzNXV3TkFBRG80OThTV0V4VVFEc0JBR0JvTFFBQStLUUFkaVlBQWdDQTM3SURBTFVGQUlER0l5RGhNd0FjaG5LQVVoRUFCWFNYUUFJUUZRQUFqQUJBRFFEczN4a0EvcGZTaWYvaDZQU0pWaGF0ZkFQZ0RSN3dGRURCZ1k0TndBZ3dlZ01BQVpDejFRQ2JEd0MxQVFDQTJYUUFBTEEzQVA4N0FDZ0FBT0RNSGdEbUFBQUFIcjRRL0YwQUFNQUZrUENwQVNZanVRWmdTN0FBNzVjRmdLZ0FBQVVBUkp3Qy9xZVN3Zjh3Vk9rVExhSkRid0JzZ1FDZUpvQ0JEUVliMEtVakdnQUF3TUtTQXFRdEFuZ0hBQUFNa2dzQUFQNXFnTnJPQUFVQUFMVnRBUUFzQUFDdzlSUVlZS2NEaDZIOEFPOHZBTkFCOXhJSXdIdDJ3S3c2UUFNQS9Sc2VtSkxCLzNDcUVpZkVXdmtHd0JSY0UvQTBnZ0ljR0d6QVlnU1k0UU1BZ0hYK1VzQVB2eFRBT3dFQW9Ma0hBQUQvZG9BN3JRQU9BQUExVUFEd0JRQUFESS9BVnhNQUFEd0RDN1lFc01wSUpMQ2ZBZ2dBdXR3QU9KVUFDcUFid1FBZW1KSkp1amdxc1dPUmFPVWJBSGNoZ1NjQXdBSFlnRk1BR0wwQkFBQjJNd040UDZkQURRRUFRSjRBQUFCL0M4QmRCb0FEQUFCUDdBRUFLd0FBM0Q4SC8yQUNBSUFEYklBS0FCMURlUWZzUDlBSmVDUUNJRTRBb0E0QTlqc0FIb2ppU1R5TVRFU1BFWTE2QTJBcVBvRW5BUVlPd0FaMDV1Z05BQUN3K0xVS3ZIOVVBQnNBQU5BV0FBQmdad0sxVlFBQUFBQWo5Z0F3QndBQUlGa0FBVDBhUU0xSVZvQ25Gd0E0ZzM4SkV2QnpLUUNjQWtBQWdQZ2FBQjZJNG1sMlNhcXE2REZrZkFOZ0t6NkFKd0FLRGhRMmdBSkFHajRBQU1qWEZTclUxVWNCZkJrQUFQS2JBd0RBeXdIQVgyR0FBZ0FBUDB3RUFPOEFBSUNyZjRIZkRBQUFEaURnZkFLd1lTZy93RStpa3dLMkdnQk9CWUFFekYwZkhwaWlaWEU0RmVuZFRNajR3VGNTd05NTUJuQ2djSURGbk5FQUFGRG03eGNCdHRZSVVPTUFBREM4dUFBQTRCVUFXd0ZBQVFEZ3FTRUE5QXNBQUppM1RLQURmazhBTUVHWmZZSlNFWUErWUpaQkFPQWtBRENyQmxBREFINERIbWlpYVR5U0NpcE9SQU0rK0hBRFBBVUFEc0FHZE1ZRGpPNERBRURKN1FJY1B3S1FCQUFBYzRjREFNREZDdkJYQStBQUFGRHRkZ0JBc2dJQWNIK0h3NjhEQUlBcjBPRDNBVEFaeWhVZ3l0QUJlTThCUUVVQUtJRHovQUllZUtKcGRpbFVWTEdqMlBnR2dBSUpQQU5RY0dDd0FaMlpvd0VBQUxZUUtrQzBOd0UvQVFDQVBpZ0FBRWdWZ0ljSTRBQUFVTnNaQU9ZUUFBQnNuZ3JRQ2E4eXdHRWtmK0Q5WXdCMDhqSFJqUEFlQWFkaUFBMEErRGNCSG1qQ2FUWVh1cXJ1elNJV0Q2N0pBNTVHTUlBRGd3MVlqQStZNFFNQWdBL2VCZGg4Q1ZBVEFRQmdYaGNCQU9DVEFsd3lBQW9BQUxqdUJBRHZBQUNBL2xEaFF3TUFBQ2dnNFZ3eEFhc001U1hnVllSTUFMcmlBWUJaQmFBQzhBWVlBUjVvQXBkZEc5MnRkK1JZb3o2NEpJQ25DUlRnQUd6QVNXZHZBQUNBeDE4RkhyWUVxQWtBQU9EdkJRQUE5d0M4MkFJb0FBREFzQWNBYndBQTRQNXZCeVFvQXp3WXlUdnd5eUlBWFlUZkNac0E3QWdBZ0JFQVNBQ3d6ME1DSGxpQ1VGd2JQVm4wV0NJYTR3YUFDZ0U4Q1ZCd29MQUJuVGw2QXdBQThFb1ZlSHNVb0Q4RUFBRHRBUUNBRnpMQWlRTUFBQUQ4MkFKQUpRSUFnR1FCTm1ITEFEVkRXUUg5WjVVQVJKSDJSOEFHNFBkWUFOaFJBZ0FCQVBxUEdoNUlRcTY0Tm1xV25vYUxySkVmZkxvRW5nQVkyS0N3QVJRZU1NTUhBSUJHM3hYNHZWc0JVaFVBZ0R3S0FBQjBtUUF2cHdFY0FBRDhDQUJVQUFBQU4vOHJ2QXNBQUJDR3dtNERPa2J5QStpM0F2UUVZSllBWUZNVlFCVXdkMndBUGxnaW9mbzY2RmxpeDFnelB2Z0dFbmlhUVJGd29MQUJpem1qQVFBQTgrRWZBUlpEQldvRUFBQ0dud0VBZ1A4dGdIU2JBQUFBZ1AvYUFJQzNBUURBNGpMQWdzOEFjT01GUFVHcENNQVcwWmNsNkFPQUxnR0FpZ1BVQU1EK0RSNUlRcUY0M2NJa3NTM1dDRGNBRkFBOEJZYUNBeDBINkFvSEdOMEhBQUJ1SFFYNGZnUHdGUUFBbUtjQUFNQk5BZjQ4QUNnQUFNQzBCd0J2QUFEZ2NHL0dmd0VBZ0ZKQXdLY0dBQU1ZNFIxQUNTVGdQUnNBb2dJQUZNQjVuUUFlT0NKSitkTG9TVVVQRWMzNDRJSUFuZ0VZT0REWWdNNGMwUUFBQUpjWEJjaUdBTmdEQUVEd0JRQUFjTHNDdFowQkNnQUE2dDBHQUNvUkFBQzJYZ0FRY0s4R09MemdIK0JKQVlCTnVKZGdBZDZ6QXpaVkIyZ0FvSDhmQU40M2dxVDZPcWlKcUZZaXhnK09BendKQUE0TU5tQXhQbUJHQXdBQStzMi9BTi8vQU5RV0FBQTAxd0FBb0pNTmdBTldBQWNBZ09vRkFDb0VBQUREUTZnM0JRQ0FjcUFEdGdMQUtqdnpBUHNwZ0FBZ3l3QndLZ0JVQU1Ed1ZnRGVOMEpwOFZyb1NsUVFzcmdCTUJVU2VBSU00R0VBc0FISEhMMEJBQUQ4N0ZWZ2UxYkExd0FBZ0JFQkFJQlBEY0IrQXVBQUFNQUhXd0FBY0FDd0EvQTJBQUI0L0J2Z3dRc082RjhXQVppdy93SUU0RzlXQU5RbkFKQUFZTDhMQ2Q0blFtWHgwb1JLcEdGMUEyQXJKUEFrS0FZZUFHQURPblAwQmdBQVpIMm1BbytYRmZCT0FBQ0kzd1VBQUQ4T2NGMEFCUUFBdnBNS0FBQ3VBSDJYQUgwN0FBQ0lJVUROemx5QlB5c0FjSWY5bDlBQVB4Y0FNRG9BQkFCcy9Cc0EzaWNpU2ZVcnFVaGtGTkZRRDc0STRHa0FBQWNLRzREeEFUTjhBQUNvKzIrQTd6c0VxRzBBQUtoTERnQUFMd2pBcHdoUUFBRGd4d2dBbFFnQUFGZi9BdThaQUFCS2dFNTRuUVNnNHdVUDRKTWdBZGhxQURnVkFWUUJjNWNFM2ljaVpmbmlWRlZSUWNUcUJzQVdDT0F3NEFCc3dHTE9hQUFBUUM0c0MyQXdGVUM2QUFDZ0h5MEFBQUFBK0pna0FOUVlBQUFzcnBVYkZXSFVBa2hBRVg1UGdCczcweE9jbEFIWWdOc3lTQUQ2SkFBd3F3YlFBSURmQXQ0bllrbjF4YWtva1NGaWVBTkF3UUdlQXNYQUFkaUFybkNBMFgwQUFPQjVyUUQzZndCOEZRQUE1bFVIQUlDL0E0Q0xHd0FIQUlBNnN3TUFid01BZ09NMmNPOEFBRkFDYk1MckFOandnbmVBS01NRzRMMEF3QWdBRk1BWlp0NEhFcTcrNnVnV0hvdk1neHNTZUpyQVVMREJZQU13UjI4QUFFQi85UmxBTkUyZ3hnRUFZTEJmQVFEQWV3RWNSZ0FBQUtDMkJRQzhCUUFBbXhjRkNtTUFISFptQlRndEFMQUJkVGtoQU8rSkFOaHFBR2dBd0g4VDNoZFNvZjVpcEZ0a1NHckVHd0JUOFlBbkFSSU9ERFpnS1R3Z0RSOEFBRXc5S0lIWHp3SEVCZ0FBbWc4T0FBRDd3Z0FYR1FBRkFBQmNXd0dnd2dBQTBLZE4rRkFBQUlBQkxPZ3l3T1FGUDhESFJBcEFHUUJtWllBS3dQTUUzaGN5b2Y1aWJQTElWbUp1QUtnUXdCTUE0TURDQm1DTzhBRUFnRUc3QkI1NkFmd0VBQUJrQ2dBQVREUUEvbXNCRkFBQXNHUUhBQlVDQUlEN2p3NElVQVo0c0RQN0JFOFZBVkRESzZFVGNMSUNaQVZJZ01FQTN1ZHhydjVpcEdjb2psTWpQdmdrZ0NmQlVMQUJiRUNYanQ0QUFJQ3F6eFM0ZWlwQUpRTUFRRndDQUFBK05JQXZITUFCQUlETDlnRGdhUUFBRUFScVJnZHFYdkFaOUo5VkFpRGdEN0FKK0wwRUFOaFNBQ0FBZ0Q4YTN0Y0pybm94MGoyOERkUHd3WWRMNEFsUURHeFEyQUNNRDVqaEF3QkFiZTBLOFB0TWdVb0NBSUI4R3dBQThCTUJQamNBSEFBQS9HZ0NnTGNBQU9EbWI0VjNBUUFBRjZnWkhPalltUmRBdndVSUFHWUpBR1pWQUZYQTNIN2V0d211L20yc1c4aEtiUHhBa01EVERBQTJLR3pBWXVab0FBQUE2UTRCbWlRRi9CQUFBSVozQWdBQUZ3eUFMaE1BQUFEd3B3WUFWQmdBQUJZWEF5a3JBR3BlOElESFJRQUVYMHdnd053ZFFDV0FCZ0QybndEZUJ5ckQwY0ZJOUJBZStzQjV3SVduQUFvMjZOaUF6bmlBMFNrQUFQajhYQUNZVHdFQWdEVUsrTGtBb0FBQWdGRjdBS2dRQUFBY2pvTi9Ld0FBdU9EekRFWUZrTkltc0dGbkRrQ1hvQUhlY3dDSUV3QW9nTGNCM3VkcHB2bmxSSytnbFZqODRKSUFuZ0VZMkFDR09jSUhBQUJ2eml1UVRRRnFEQUFBZkFRQUFQam9RRzFuQUFBQW9IN3RBSUNPNGVrSndPc3ZnY01McmtDNUFFQ0RMWUVFek93QTJRRWF3S0FBVDJkblV3QUVtcTRBQUFBQUFBQ0U2czhpQkFBQUFKNUN3MU1IVDBOSFFERVpBZDdYR1Z6enkwRUpZamhBZWhvQndBYUREVmdLQUpsU0FBRHdYVnNGb0xrSUFBRDRGWUF4RThBQkFLQzJNZ0M0Q1FBQTBRTDhBQUFBWG5qOWdMNEpvR040WUxJelA4QlBBaEZrQmJ3Q2NBcmVsNWxkODhzQWZvWUhueVJ3Q0RBSGFWQUtBQUM4YmlrdzdGQWcyZ0lBZ1B3TkFBQmNTM2g2UUFQZ1J4a0FDVXF3QXdDZkYzQjQ4VEhDNUNjQVhoV2dCbUFNM3FkWm0vcExVdUJIQVUxKzhBQThDUUQ2R3VpNEtBVUFnQnJzQTVqM1YyQWVBQUNBYmdFQUFPTUM4QU5BQVNVQUFDQ2RBT2hmUndBYUk2Qno1WURQQVNZUDRBRklBQTNlaHptNjZvdFRXdmtwcW8wSGZEZ0VXRU9oa3dvVUFBRHFyVU1BeUZZQUFBQUE4RWNBd09jRzBJOEQrQ3U0U0ZqUUdHRUNjUDRKNFBzVEFBOUFBTEFBM3FlNWh1b2thZ29mMGhnUEJBR002QVFCQUFBQWZrR0FmRTRBdHdJQTZGTUE5TkZzZ0JFQ1FFRUM0RHFBOVFVZ0FON0grYm9JQUJFNHFVOEJBRnpUNTBnS1Roc0JYaW1BbndBTydcclxuXHRjb25zdCBhdWRpbyA9IG5ldyBBdWRpbyhhdWRpb1VybCk7XHJcblx0YXVkaW8ucGxheSgpO1xyXG59XHJcblxyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJQbHVnaW5TZXR0aW5nVGFiIiwiU2V0dGluZyIsIk5vdGljZSIsIlBsdWdpbiIsIm1vbWVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXVEQTtBQUNPLFNBQVMsU0FBUyxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRTtBQUM3RCxJQUFJLFNBQVMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sS0FBSyxZQUFZLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsVUFBVSxPQUFPLEVBQUUsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTtBQUNoSCxJQUFJLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxFQUFFLFVBQVUsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUMvRCxRQUFRLFNBQVMsU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7QUFDbkcsUUFBUSxTQUFTLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7QUFDdEcsUUFBUSxTQUFTLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUU7QUFDdEgsUUFBUSxJQUFJLENBQUMsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsVUFBVSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUUs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
